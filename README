			TI AM62A7 SK EVM Board


1. About this document
======================
This document describes the common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with Wind River Linux
and the wr-kernel layer.


Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.


Building the ti-am62 layer
--------------------------
This layer and wr-kernel layer should be added to bblayers.conf. This
is done automatically when using the Wind River configure wrapper.


License
-------
Copyright (C) 2024 Wind River Systems, Inc.

Source code included in the tree for individual recipes is under the LICENSE
stated in the associated recipe (.bb file) unless otherwise stated.

The metadata is under the following license unless otherwise stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+-------------------+--------------+
  | valid/distro |   wrlinux   | wrlinux-graphics | wrlinux-installer | wrlinux-tiny |
  +--------------+-------------+------------------+-------------------+--------------+
  |    valid     |      Y      |        Y         |         N         |       N      |
  +--------------+-------------+------------------+-------------------+--------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt ktype is available for this BSP/Machine at this time.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP along with
patch descriptions use git-whatchanged on the default kernel. For example:

	%> cd tmp-glibc/work-shared/<bsp_name>/kernel-source
	%> git whatchanged <kernel_version>/standard/base..<kernel_version>/standard/<bsp_name>


4. Boot Instructions
====================

The typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store respectively
your network configuration details and kernel command line. In order to
TFTP a kernel, you need at a minimum to set the following:

	- ipaddr
	- gatewayip
	- netmask
	- serverip
	- loadaddr
	- dtbfile
	- dtbaddr
	- ethaddr

Your board may ship with the values for the MAC address of
the Ethernet interfaces set to the defaults compiled into the
u-boot image.  You should set the ethaddr, eth1addr and so on
as per the manufacturer assigned values, usually indicated with
a sticker on the board.

Target specifics are usually set in the "bootargs" variable, and the
kernel image is set in the "bootfile" variable. Don't forget that if you
want these values to be available after a power cycle you will need to run
the saveenv command.

Typically convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings.  Since these macros exist as env variables themselves, they
may or may not be present depending on who installed and configured
u-boot for the board.

The console device for the board is ttyLF0 at 115200 baud. For the DTB
address, 0x88000000 was used with success by Wind River. The load address
must be high enough to not interfere with kernel decompression. A value
of 0x82000000 was used with success for all kernels tested by Wind River.

4.1 NFS Root File System
------------------------

Example settings for the monitor (u-boot) are shown below:

nfsboot=setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath \
ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off \
console=$consoledev,$baudrate earlycon=ns16550a,mmio32,0x02800000;tftp $loadaddr $bootfile; \
tftp $fdtaddr $fdtfile;booti $loadaddr - $fdtaddr
ethaddr=00:04:9F:02:00:FD
loadaddr=0x82000000
fdtaddr=0x88000000
gatewayip=192.168.1.1
netmask=255.255.255.0
ipaddr=192.168.1.100
serverip=192.168.1.2
netdev=eth0
bootfile=Image
fdtfile=k3-am62a7-sk.dtb
rootpath=/tftpboot/rootfs
consoledev=ttyS2
baudrate=115200

5. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator to create the properly partitioned
image on a SD card. It generates partitioned images from existing OpenEmbedded
build artifacts. Please refer to the following URL for more detailed partition
information about WIC:

https://docs.yoctoproject.org/singleindex.html#creating-partitioned-images-using-wic

5.1 Deploy the created WIC image
--------------------------------

Deploy the created WIC image into SD card(/dev/sdx) in your host machine.

   $ sudo dd if=wrlinux-image-<rootfs_type>-<machine>.wic of=/dev/sdx

5.2 Boot the board from the WIC SD card
---------------------------------------

Insert the SD card into the board and select this SD card as the boot device.

You have two ways to start the board:

1. Use the ubootâ€™s default startup environment variables.

2. By set the below uboot environment variables:
   $ setenv bootargs console=ttyS2,115200n8 earlycon=ns16550a,mmio32,0x02800000 root=/dev/mmcblk1p2 rw rootwait ip=dhcp
   $ fatload mmc 1:1 0x82000000 Image; fatload mmc 1:1 0x88000000 k3-am62a7-sk.dtb; booti 0x82000000 - 0x88000000


6. Features
===========

Before using the features below, it is recommended that you first add
WRTEMPLATE to your build local.conf to add series tools (Such as: can/audio/ufs).

Simply add line as follows to ${buildprj}/build/conf/local.conf:
	WRTEMPLATE = "feature/bsp-extras"

And it is recommended to refer to the "Foundational Components" of the sdk
release note "Processor SDK Linux for AM62A" from the TI web.

6.1 Audio
---------

6.1.1 Usage and verification
----------------------------

        # aplay -Dplughw:0,0 <path to wav file>

6.2 PM suspend
--------------

6.2.1 Usage and verification
----------------------------

        # rtcwake -s 10 -m mem -d rtc1

6.3 PM cpufreq
--------------

6.3.1 Usage and verification
----------------------------

  cpufreq:

    # cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors
    conservative ondemand userspace powersave performance schedutil
    # cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
    1250000
    # cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies
    200000 400000 600000 800000 1000000 1250000
    # echo userspace > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    # echo 200000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed
    # cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
    200000

6.4 USB
-------

6.4.1 Usage and verification
----------------------------

Host mode is OK as-is, the following example for device mode:
        # modprobe g_multi "file=/dev/mmcblk0p1"

6.5 IPC
-------

6.5.1 Usage and verification
----------------------------

root@ti-am62:~# rpmsg_char_simple -r0 -n5
Created endpt device rpmsg-char-0-428, fd = 4 port = 1026
Exchanging 5 messages with rpmsg device ti.ipc4.ping-pong on rproc id 0 ...

Sending message #0: hello there 0!
Receiving message #0: hello there 0!
Sending message #1: hello there 1!
Receiving message #1: hello there 1!
Sending message #2: hello there 2!
Receiving message #2: hello there 2!
Sending message #3: hello there 3!
Receiving message #3: hello there 3!
Sending message #4: hello there 4!
Receiving message #4: hello there 4!

Communicated 5 messages successfully on rpmsg-char-0-428

TEST STATUS: PASSED


6.6 Video
---------

The Encoder/Decoder (VENC/VDEC) is a stateful encoder/decoder, it is found on
the AM62Ax SoC. Combined H.264 and H.265 encoder/decoder used in the Texas 
Instruments AM62Ax SoC.

The Linux Kernel Drivers has integrated the Video Decoder and Encoder as module by default.
Because of the license issue, you can manually build the Image as below to
integrate the gstreamer related packages:

6.6.1 Build Image
-----------------

  1) set BB_NO_NETWORK as '0' in ${buildprj}/build/conf/local.conf file.

  2) Add line as follows to ${buildprj}/build/conf/local.conf:
     $ cat << _EOF >> conf/local.conf
CUSTOMER_RECIPES:openembedded-layer += 'faad2'
LICENSE_FLAGS_ACCEPTED += "commercial"
IMAGE_INSTALL:append:ti-am62 = ' gstreamer1.0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-libav'
_EOF

  3) bitbake wrlinux-image-xxx

6.6.2 Verify Multimedia feature
-------------------------------

An example to test with GStreamer Pipelines on target board:
	$ gst-launch-1.0 filesrc location=/<path_to_file>  ! rawvideoparse width=1920 height=1080 format=i420 framerate=30/1 colorimetry=bt709 ! v4l2h264enc ! filesink location=/<path_to_file>  sync=true

6.7 Build U-Boot
----------------

By default, the u-boot image is compiled and installed. If you want u-boot to be manually
compiled separately, use the following commandï¼š

	# bitbake u-boot-ti-staging

6.8 CPSW Ethernet
-----------------

By default, the CPSW Eth0 is enabled and Eth1 is not enabled. Need to install
corresponding dtbo file to enable Eth1 port, in addition to other environment variables,
the following environment variables need to be set additionally at uboot to apply dtbo files:

1. Boot from NFS:
        => tftpboot 0x82000000 Image; tftpboot 0x88000000 dtb
	=> fdt address 0x88000000; fdt resize 0x100000; tftpboot 0x89000000 k3-am62a7-sk-ethernet-dc01.dtbo;fdt apply 0x89000000;
        => booti 0x82000000 - 0x88000000

2. Boot from WIC:
 Just modify the uEnv.txt to add with below:
	name_overlays=k3-am62a7-sk-ethernet-dc01.dtbo

6.9 Camera
----------

To enable camera connected to the 22-pin FFC connector, enable the sensor overlay at U-boot prompt:

1. Boot from NFS:
        => tftpboot 0x82000000 Image; tftpboot 0x88000000 dtb
        => fdt address 0x88000000; fdt resize 0x100000; tftpboot 0x89000000 k3-am62x-sk-csi2-imx219.dtbo;fdt apply 0x89000000;
        => booti 0x82000000 - 0x88000000

2. Boot from WIC:
 Just modify the uEnv.txt to add with below:
        name_overlays=k3-am62x-sk-csi2-imx219.dtbo

6.10 EdgeAI
-----------

AM62Ax has integrated micro controllers, DSP, and accelerators for neural network, image, vision, and multimedia processing.
With a few simple steps one can run high performance computer vision and deep learning demos using a live camera and display.

6.10.1 Build Image
------------------
	1. Set BB_NO_NETWORK as '0' in ${buildprj}/build/conf/local.conf file.

	2. Enable Video feature, please refer to "6.6.1 Build Image".

	3. Add edgeai & vision-apps & tidl & tiovx related packages, add lines
	as below to ${buildprj}/build/conf/local.conf:
	
	$ cat << _EOF >> conf/local.conf
WRTEMPLATE = "feature/bsp-extras"
DISTRO ?= "wrlinux-graphics"
CUSTOMER_RECIPES:openembedded-layer += 'yaml-cpp'
CUSTOMER_RECIPES:meta-python += 'python3-yamlloader'
CUSTOMER_RECIPES:openembedded-layer += 'glm'
CUSTOMER_RECIPES:meta-edgeai += 'ti-vision-apps ti-tidl edgeai-apps-utils edgeai-tiovx-kernels edgeai-tiovx-modules ti-edgeai-firmware edgeai-tiovx-apps'
CUSTOMER_RECIPES:meta-edgeai += 'edgeai-gst-apps edgeai-dl-inferer ti-tidl-osrt edgeai-gst-plugins tisdk-edgeai-image edgeai-tidl-models edgeai-test-data ti-gpio-cpp'
CUSTOMER_RECIPES:meta-ti-bsp += 'devil kms++'
IMAGE_INSTALL:append:ti-am62 = ' ti-vision-apps-dev ti-tidl-dev edgeai-tiovx-kernels-dev edgeai-tiovx-modules-dev edgeai-tiovx-kernels-source edgeai-tiovx-modules-source edgeai-apps-utils-source ti-edgeai-firmware'
IMAGE_INSTALL:append:ti-am62 = ' ti-tidl-osrt-dev ti-tidl-osrt-staticdev edgeai-gst-plugins-dev edgeai-dl-inferer-staticdev edgeai-gst-apps-source edgeai-gst-plugins-source edgeai-dl-inferer-source edgeai-tidl-models edgeai-test-data ti-gpio-cpp-source'
IMAGE_INSTALL:append:ti-am62 = ' devil kms++ python3-pygobject'
IMAGE_INSTALL:remove:ti-am62 = ' ti-dm-fw'
_EOF

	4. bitbake wrlinux-image-std-sato

6.10.2 Verify EdgeAI feature
----------------------------
	1. Enable IMX219 camera, please refer to "6.9 Camera".
	2. Run python based image classification demo:
	   $ cd /opt/edgeai-gst-apps
	   $ ./init_script.sh
	   $ ./apps_python/app_edgeai.py configs/image_classification.yaml

Note:
Since our WRLinux integrates python3.11 by default, TI SDK provides python3.10
based image classification runtime modules and libraries for above demo testing.
Running above demo will emit some errors due to the python version mismatch,
This is as a known issue and will be fixed till TI provides the python3.11 based
runtime modules and libraries.

6.11 TSN
--------

TI AM62Ax Common Platform Ethernet Switch (CPSW) supports TSN features such as:
	1.PTP (Precision Time Protocol) [IEEE-1588, IEEE-802.1AS]
	2.EST (Enhancements for Scheduled Traffic) [IEEE-802.1Qbv]
	3.FQTSS/CBS (Credit Based Shaper) [IEEE-802.1Qav]
	4.IET (Interspersing Express Traffic) [IEEE-802.3br, IEEE-802.1Qbu]

To get more details about TSN feature, please refer to instructions mentioned in the sections
"3.2.2.8.3.2. TSN with CPSW" in the web link user manual of PROCESSOR-SDK-LINUX-AM62A.

The following will provide a simple test demo for each TSN feature. Their test environment is
to directly connect two AM62AX SK EVM boards through eth0 port, one as the master and the other as the slave.

6.11.1 PTP
----------

In both AM62AX SK EVM boards, create a config file named ptp.cfg whose contents are as follows:
[global]
tx_timestamp_timeout 400

1. Run the following on master target:
	# ptp4l -E -2 -H -i eth0 -l 6 -m -q -f ptp.cfg

2. Run the following on slave target:
	# ptp4l -E -2 -H -i eth0 -s -l 6 -m -q -f ptp.cfg

6.11.2 EST
----------

1. Run the following on slave target:
	# while sleep 1; do plget -m rx-lat -f ipgap -n 128 -i eth0 -t ptpl2 -f hwts; done

2. Create the below script and run on master target:
#!/bin/sh

# AM62A CPSW Port-0
ifconfig eth0 down
ethtool -L eth0 tx 3
ethtool --set-priv-flags eth0 p0-rx-ptype-rrobin off
ifconfig eth0 up
sleep 30

#sync system time to CPSW CPTS
phc2sys -s CLOCK_REALTIME -c eth0 -m -O 0 > /dev/null &

#calc base_time as now + 2min, give it time to sync
base=$(((`date +%s` + 2 * 60)*1000000000))

tc qdisc replace dev eth0 parent root handle 100 taprio \
    num_tc 3 \
    map 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 \
    queues 1@0 1@1 1@2 \
    base-time $base \
    sched-entry S 4 125000 \
    sched-entry S 2 125000 \
    sched-entry S 1 250000 \
    flags 2

tc qdisc add dev eth0 clsact
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5001 0xffff action skbedit priority 3
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5002 0xffff action skbedit priority 2
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5003 0xffff action skbedit priority 1
tc qdisc show dev eth0

# Wait for 2 minutes for sync to complete
sleep 120

# NOTE: Replace 1c:63:49:17:24:ae with the MAC address of eth0 of slave AM62AX EVM
plget -i eth0 -m pkt-gen -p 3 -t ptpl2 -n 128 -a 1c:63:49:17:24:ae -l 1500
sleep 5
plget -i eth0 -m pkt-gen -p 2 -t ptpl2 -n 128 -a 1c:63:49:17:24:ae -l 1500
sleep 5
plget -i eth0 -m pkt-gen -p 1 -t ptpl2 -n 128 -a 1c:63:49:17:24:ae -l 1500

6.11.3 CBS
----------

1. Create the below script and run on master target:
#!/bin/sh

ifconfig eth0 down
ethtool -L eth0  tx 8
ifconfig eth0 up
ifconfig eth0 192.168.1.1

sleep 10

tc qdisc replace dev eth0 handle 100: parent root mqprio num_tc 3 \
map 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 queues 1@0 1@6 1@7 hw 0

echo 106 > /sys/class/net/eth0/queues/tx-7/tx_maxrate
echo 212 > /sys/class/net/eth0/queues/tx-6/tx_maxrate

tc qdisc add dev eth0 clsact
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5001 0xffff action skbedit priority 7
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5002 0xffff action skbedit priority 6

iperf3 -c 192.168.1.2 -t10 -p5001 -Tpri7 & \
iperf3 -c 192.168.1.2 -t10 -p5002 -Tpri6 & \
iperf3 -c 192.168.1.2 -t10 -p5003 -Tpri0

2. Create the below script and run on slave target:
ifconfig eth0 192.168.1.2
iperf3 -s -p 5001&
iperf3 -s -p 5002&
iperf3 -s -p 5003&

6.11.4 IET
----------

1. Create the below script and run on master target:
#!/bin/sh

ifconfig eth0 down
ethtool -L eth0 tx 2
ethtool --set-priv-flags eth0 p0-rx-ptype-rrobin off
ethtool --set-priv-flags eth0 iet-frame-preemption on
ethtool --set-priv-flags eth0 iet-mac-verify on
ifconfig eth0 up
sleep 5

iperf3 -s -i30 -p5002&
iperf3 -s -i30 -p5003&
ifconfig eth0 192.168.100.30

2. Create the below script and run on slave target:
#!/bin/sh

ifconfig eth0 down
ethtool -L eth0 tx 2
ethtool --set-priv-flags eth0 p0-rx-ptype-rrobin off
ethtool --set-priv-flags eth0 iet-frame-preemption on
ethtool --set-priv-flags eth0 iet-mac-verify on
ifconfig eth0 up
sleep 5

tc qdisc replace dev eth0 handle 100: parent root mqprio \
    num_tc 2 \
    map 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 \
    queues 1@0 1@1 \
    hw 0

tc -g class show dev eth0
tc qdisc add dev eth0 clsact
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5002 0xffff action skbedit priority 2
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5003 0xffff action skbedit priority 3
ip addr add 192.168.100.20/24 dev eth0
sleep 2
iperf3 -c 192.168.100.30 -u -b200M -l1472 -u -t30 -i30 -p5002&
iperf3 -c 192.168.100.30 -u -b50M -l1472 -u -t30 -i30 -p5003&
